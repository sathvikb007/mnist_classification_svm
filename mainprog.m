%% Data preprocessing

test_data = readmatrix('mnist_test.csv');
train_data = readmatrix('mnist_train.csv');
X_train = train_data(:, 2:end);
Y_train = train_data(:, 1);
X_test = test_data(:,2:end);
Y_test = test_data(:, 1);

%% Training a linear SVM
template = templateSVM(...
    'KernelFunction', 'linear', ...
    'PolynomialOrder', [], ...
    'KernelScale', 'auto', ...
    'BoxConstraint', 1, ...
    'Standardize', true);

linearSVM = fitcecoc(...
    X_train, ...
    Y_train, ...
    'Learners', template, ...
    'Coding', 'onevsone', ...
    'ClassNames', [0; 1; 2; 3; 4; 5; 6; 7; 8; 9]);

%% Predictions and error using linear SVM
yPredLinear = predict(linearSVM, X_test );

error_linear  = loss( linearSVM, X_test , Y_test);

%% Training a quadratic SVM
template = templateSVM(...
    'KernelFunction', 'polynomial', ...
    'PolynomialOrder', 2, ...
    'KernelScale', 'auto', ...
    'BoxConstraint', 1, ...
    'Standardize', true);

quadraticSVM = fitcecoc(...
    X_train, ...
    Y_train, ...
    'Learners', template, ...
    'Coding', 'onevsone', ...
    'ClassNames', [0; 1; 2; 3; 4; 5; 6; 7; 8; 9]);
%% Predictions and error using quadratic SVM
yPredQuadratic = predict(quadraticSVM, X_test );

error_quadratic  = loss(quadraticSVM, X_test , Y_test);

%% Training a cubic SVM
  template = templateSVM(...
    'KernelFunction', 'polynomial', ...
   'PolynomialOrder', 3, ...
    'KernelScale', 'auto', ...
    'BoxConstraint', 1, ...
    'Standardize', true);

  cubicSVM = fitcecoc(...
    X_train, ...
    Y_train, ...
    'Learners', template, ...
    'Coding', 'onevsone', ...
    'ClassNames', [0; 1; 2; 3; 4; 5; 6; 7; 8; 9]);

%% Predictions and error using cubic SVM
yPredCubic = predict(cubicSVM, X_test );

error_cubic  = loss(cubicSVM, X_test , Y_test);


%% Training Gaussian kernel SVM
template = templateSVM(...
    'KernelFunction', 'gaussian', ...
    'PolynomialOrder', [], ...
    'KernelScale', 28, ...
    'BoxConstraint', 1, ...
    'Standardize', true);

gaussianSVM = fitcecoc(...
    X_train, ...
    Y_train, ...
    'Learners', template, ...
    'Coding', 'onevsone', ...
    'ClassNames', [0; 1; 2; 3; 4; 5; 6; 7; 8; 9]);

%% Predictions and error using Gaussian SVM

yPredGaussian = predict(gaussianSVM, X_test );

error_gaussian  = loss(gaussianSVM, X_test , Y_test);


 


